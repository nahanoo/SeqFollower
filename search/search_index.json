{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to StrucFollower Introduction This package helps you to identify deleted or inserted sequences in evolved bacterial strains. For example if you evolved antibiotic resistance to a bacterial strain this package helps you to identify sequences which were integrated or deleted in the genome during evolution. With it's support for GenBank files StrucFollower also tells you which products were inserted or deleted. StrucFollower optionally generates visualizations of alignments of inserted or deleted sequences which can help in assessing the confidence of the detected or inserted sequence. Additionally if you evolved your bacterial strain in co-culture with other bacterial strains, StrucFollower has a feature which identifies sequences which were integrated in the genome from the other bacterial strains of the co-culture. This package has very few dependencies and because of it's simple design it's fast and reliable. Installation This package requires SAMtools>=1.11 and minimap2 in your PATH. If haven't installed those dependencies already you can install them with conda : conda install -c bioconda samtools conda install -c bioconda minimap2 StrucFollower itself can be installed with pip: pip install git+https://github.com/nahanoo/deletion_detection.git StrucFolower creates three console scripts which are independently callable. Click on the console script name for the detailed documentation of the according sub-module. detect_deletions - Detects deleted sequences. detect_insertions - Detects inserted sequences. hgt - Detects sequences integrated in the genome from other bacterial strains. Input data StrucFollower was developed and tested with PacBio long-read sequencing data and it's recommended to use high-quality assemblies. Alternatively to PacBio assemblies, hybrid-assembled genomes with Nanopre and Illumina data should work as well. Principle All three sub-modules have a similar underlying mechanism. As an input the GenBank or the FASTA file of the ancestral strain and the mutated strain are required. Depending on the sub-module, either the ancestral or the mutated genome is chunked into smaller sequences using a sliding window. Typically a window size of 500 base-pairs and start-shift of 100 base-pairs is used. Below you can see an example of chunked sequences aligned to the genome itself: These chunks are then aligned either to the ancestral or the mutated genome. For a more detailed description of the alignment check the according sub-module description.","title":"Home"},{"location":"#welcome-to-strucfollower","text":"","title":"Welcome to StrucFollower"},{"location":"#introduction","text":"This package helps you to identify deleted or inserted sequences in evolved bacterial strains. For example if you evolved antibiotic resistance to a bacterial strain this package helps you to identify sequences which were integrated or deleted in the genome during evolution. With it's support for GenBank files StrucFollower also tells you which products were inserted or deleted. StrucFollower optionally generates visualizations of alignments of inserted or deleted sequences which can help in assessing the confidence of the detected or inserted sequence. Additionally if you evolved your bacterial strain in co-culture with other bacterial strains, StrucFollower has a feature which identifies sequences which were integrated in the genome from the other bacterial strains of the co-culture. This package has very few dependencies and because of it's simple design it's fast and reliable.","title":"Introduction"},{"location":"#installation","text":"This package requires SAMtools>=1.11 and minimap2 in your PATH. If haven't installed those dependencies already you can install them with conda : conda install -c bioconda samtools conda install -c bioconda minimap2 StrucFollower itself can be installed with pip: pip install git+https://github.com/nahanoo/deletion_detection.git StrucFolower creates three console scripts which are independently callable. Click on the console script name for the detailed documentation of the according sub-module. detect_deletions - Detects deleted sequences. detect_insertions - Detects inserted sequences. hgt - Detects sequences integrated in the genome from other bacterial strains.","title":"Installation"},{"location":"#input-data","text":"StrucFollower was developed and tested with PacBio long-read sequencing data and it's recommended to use high-quality assemblies. Alternatively to PacBio assemblies, hybrid-assembled genomes with Nanopre and Illumina data should work as well.","title":"Input data"},{"location":"#principle","text":"All three sub-modules have a similar underlying mechanism. As an input the GenBank or the FASTA file of the ancestral strain and the mutated strain are required. Depending on the sub-module, either the ancestral or the mutated genome is chunked into smaller sequences using a sliding window. Typically a window size of 500 base-pairs and start-shift of 100 base-pairs is used. Below you can see an example of chunked sequences aligned to the genome itself: These chunks are then aligned either to the ancestral or the mutated genome. For a more detailed description of the alignment check the according sub-module description.","title":"Principle"},{"location":"about/","text":"About page","title":"About"},{"location":"about/#about-page","text":"","title":"About page"},{"location":"deletion_detection/","text":"Deletion Detection Principle To detect deletions, StrucFollower chunks the genome of the mutated strain into smaller chunks. These chunks are aligned to the ancestral genome. The alignment is scanned for areas with no coverage. In areas with no coverage the given sequence is present in the genome of the ancestral strain but absent the genome of the mutated strain. In order to find the positions of the deleted sequences in the genome of the mutated strain, the area around the identified sequence in the genome of the ancestral strain is extracted and aligned to the genome of the mutated strain. Based on this alignment the positions in the genome of the mutant are identified. Usage usage: detect_deletions [-h] [--plot] ancestral mutant out_dir Detect insertions in evolved bacterial strains. positional arguments: ancestral fasta file of the ancestral strain mutant genbank file of the mutated strain. out_dir output directory optional arguments: -h, --help show this help message and exit --plot plots alignment of deletions Example: detect_deletions --plot ancestral.fasta mutant.gbk ./ Outputs no_coverage.tsv - Outputs all positions with no coverage in the genome of the ancestral strain. deletions.tsv - Outputs all deleted sequences containing the positions in the genome of the mutated strain ( chromosome and position ) and the ancestral strain ( chromosome_origin and position_origin ). deletions.annotated.tsv - Stores additionally which products were deleted. plasmids.tsv - Outputs entirely deleted plasmids. plasmids.annotated.tsv - Stores additionally which products were located on the plasmids plots - Optional output. alignments - Visualizes alignments of areas located in no_coverage.tsv . annotations - Visualizes the annotation of the deleted sequence. Visualization of a detected deletion The base-track is the genome of the ancestral strain and the aligned sequences the sequence chunks of the genome of the mutant. The ID of the chunk consists of the contig name and the enumerated counter of the chunk. As you you can see the highest counter on the left side of the gap is 25082. The counter is continued on the right side with 25083. This continuity ensures us that the gap in the alignments is due to a deleted sequence. In this example we can say pretty confidently that we identified a deleted sequence. If the counters wouldn't be continuous or even come from different contigs the confidence would be lower.","title":"Deletion Detection"},{"location":"deletion_detection/#deletion-detection","text":"","title":"Deletion Detection"},{"location":"deletion_detection/#principle","text":"To detect deletions, StrucFollower chunks the genome of the mutated strain into smaller chunks. These chunks are aligned to the ancestral genome. The alignment is scanned for areas with no coverage. In areas with no coverage the given sequence is present in the genome of the ancestral strain but absent the genome of the mutated strain. In order to find the positions of the deleted sequences in the genome of the mutated strain, the area around the identified sequence in the genome of the ancestral strain is extracted and aligned to the genome of the mutated strain. Based on this alignment the positions in the genome of the mutant are identified.","title":"Principle"},{"location":"deletion_detection/#usage","text":"usage: detect_deletions [-h] [--plot] ancestral mutant out_dir Detect insertions in evolved bacterial strains. positional arguments: ancestral fasta file of the ancestral strain mutant genbank file of the mutated strain. out_dir output directory optional arguments: -h, --help show this help message and exit --plot plots alignment of deletions Example: detect_deletions --plot ancestral.fasta mutant.gbk ./","title":"Usage"},{"location":"deletion_detection/#outputs","text":"no_coverage.tsv - Outputs all positions with no coverage in the genome of the ancestral strain. deletions.tsv - Outputs all deleted sequences containing the positions in the genome of the mutated strain ( chromosome and position ) and the ancestral strain ( chromosome_origin and position_origin ). deletions.annotated.tsv - Stores additionally which products were deleted. plasmids.tsv - Outputs entirely deleted plasmids. plasmids.annotated.tsv - Stores additionally which products were located on the plasmids plots - Optional output. alignments - Visualizes alignments of areas located in no_coverage.tsv . annotations - Visualizes the annotation of the deleted sequence. Visualization of a detected deletion The base-track is the genome of the ancestral strain and the aligned sequences the sequence chunks of the genome of the mutant. The ID of the chunk consists of the contig name and the enumerated counter of the chunk. As you you can see the highest counter on the left side of the gap is 25082. The counter is continued on the right side with 25083. This continuity ensures us that the gap in the alignments is due to a deleted sequence. In this example we can say pretty confidently that we identified a deleted sequence. If the counters wouldn't be continuous or even come from different contigs the confidence would be lower.","title":"Outputs"}]}