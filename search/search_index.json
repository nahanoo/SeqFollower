{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to StrucFollower Introduction This package helps you to identify deleted or inserted sequences in evolved bacterial strains. For example if you evolved antibiotic resistance to a bacterial strain this package helps you to identify sequences which were integrated or deleted during evolution. With its support for GenBank files StrucFollower also tells you which products were inserted or deleted. StrucFollower optionally generates visualizations of alignments from which the inserted or deleted sequences were detected which helping in assessing the confidence of the detected sequences. If you evolved your bacterial strain with other bacterial strains in co-culture StrucFollower has a feature which identifies horizontal gene transfers (HGTs). This package has very few dependencies and because of the simple design it's fast and reliable. Every sub-module takes less than 2 minutes to run locally. Installation This package requires SAMtools>=1.11 and minimap2 in your PATH. If you haven't installed those dependencies already you can install them with conda : conda install -c bioconda samtools conda install -c bioconda minimap2 StrucFollower itself can be installed with pip: pip install git+https://github.com/nahanoo/StrucFollower.git StrucFollower creates three console scripts which are independently callable. Click on the console script name for the detailed documentation of the sub-module. detect_deletions - Detects deleted sequences. detect_insertions - Detects inserted sequences. detect_hgts - Detects horizontal gene transfers. Input data StrucFollower was developed and tested with PacBio long-read sequencing data and it's recommended to use high-quality assemblies. As an alternative to PacBio assemblies, hybrid-assemblies with Nanopre and Illumina data should work as well. Principle All three sub-modules have a similar mechanism. As an input the GenBank or the FASTA file of the ancestral strain (ancestor) and the mutated strain (mutant) are required. To detect HGTs the FASTA files of the other bacterial strains of the co-culture are required additionally. Depending on the sub-module either the genome of the ancestor or the mutant is chunked into smaller sequences using a sliding window. Typically a window size of 500 base-pairs and a start-shift of 100 base-pairs is used. Below you can see an example of chunked sequences aligned to the genome itself: The sequence name consists of the contig name and an enumerated counter of the chunk. This helps us in investigating deleted or inserted sequences with the generated visualizations. Those chunks are then aligned either to the ancestor, mutant or the references of the strains from the co-culture using minimap2 . A detailed description of the alignment process is available in the different sub-module documentations. Optionally, the alignments which were used to detect the deleted or inserted sequences are plotted which can help in assessing the quality of the detections. More information about how to interpret those alignment plots is available in the different sub-module documentations. Contributing The development of StrucFollower takes place on GitHub . Head over there if you are interested in the code or want to contribute to the project.","title":"Home"},{"location":"#welcome-to-strucfollower","text":"","title":"Welcome to StrucFollower"},{"location":"#introduction","text":"This package helps you to identify deleted or inserted sequences in evolved bacterial strains. For example if you evolved antibiotic resistance to a bacterial strain this package helps you to identify sequences which were integrated or deleted during evolution. With its support for GenBank files StrucFollower also tells you which products were inserted or deleted. StrucFollower optionally generates visualizations of alignments from which the inserted or deleted sequences were detected which helping in assessing the confidence of the detected sequences. If you evolved your bacterial strain with other bacterial strains in co-culture StrucFollower has a feature which identifies horizontal gene transfers (HGTs). This package has very few dependencies and because of the simple design it's fast and reliable. Every sub-module takes less than 2 minutes to run locally.","title":"Introduction"},{"location":"#installation","text":"This package requires SAMtools>=1.11 and minimap2 in your PATH. If you haven't installed those dependencies already you can install them with conda : conda install -c bioconda samtools conda install -c bioconda minimap2 StrucFollower itself can be installed with pip: pip install git+https://github.com/nahanoo/StrucFollower.git StrucFollower creates three console scripts which are independently callable. Click on the console script name for the detailed documentation of the sub-module. detect_deletions - Detects deleted sequences. detect_insertions - Detects inserted sequences. detect_hgts - Detects horizontal gene transfers.","title":"Installation"},{"location":"#input-data","text":"StrucFollower was developed and tested with PacBio long-read sequencing data and it's recommended to use high-quality assemblies. As an alternative to PacBio assemblies, hybrid-assemblies with Nanopre and Illumina data should work as well.","title":"Input data"},{"location":"#principle","text":"All three sub-modules have a similar mechanism. As an input the GenBank or the FASTA file of the ancestral strain (ancestor) and the mutated strain (mutant) are required. To detect HGTs the FASTA files of the other bacterial strains of the co-culture are required additionally. Depending on the sub-module either the genome of the ancestor or the mutant is chunked into smaller sequences using a sliding window. Typically a window size of 500 base-pairs and a start-shift of 100 base-pairs is used. Below you can see an example of chunked sequences aligned to the genome itself: The sequence name consists of the contig name and an enumerated counter of the chunk. This helps us in investigating deleted or inserted sequences with the generated visualizations. Those chunks are then aligned either to the ancestor, mutant or the references of the strains from the co-culture using minimap2 . A detailed description of the alignment process is available in the different sub-module documentations. Optionally, the alignments which were used to detect the deleted or inserted sequences are plotted which can help in assessing the quality of the detections. More information about how to interpret those alignment plots is available in the different sub-module documentations.","title":"Principle"},{"location":"#contributing","text":"The development of StrucFollower takes place on GitHub . Head over there if you are interested in the code or want to contribute to the project.","title":"Contributing"},{"location":"about/","text":"About StrucFollower was developed by Eric Ulrich. This project is part of my PhD in the lab of Sara Mitri at the Department of Fundamental Microbiology in Lausanne.","title":"About"},{"location":"about/#about","text":"StrucFollower was developed by Eric Ulrich. This project is part of my PhD in the lab of Sara Mitri at the Department of Fundamental Microbiology in Lausanne.","title":"About"},{"location":"detect_deletions/","text":"Detect deletions Alignment and detection To detect deletions StrucFollower chunks the genome of the mutant into smaller chunks. Those chunks are aligned to the genome of the ancestor and the alignment is scanned for areas with no coverage. In areas with no coverage the given sequence is present in the ancestor but absent in the mutant. The sequence flanking the alignment gap in the ancestor is extracted and aligned back to the genome of the mutant. Based on this alignment the positions in the genome of the mutant are identified. Usage usage: detect_deletions [-h] [--plot] mutant ancestral out_dir Detect deletions in evolved bacterial strains. positional arguments: mutant fasta file of the mutated strain. ancestral genbank file of the ancestor out_dir output directory optional arguments: -h, --help show this help message and exit --plot plot alignments and annotations Example: detect_deletions --plot ancestor.gbk mutant.fasta ./ Outputs no_coverage.tsv - Outputs all positions with no coverage in the genome of the ancestor. deletions.tsv - Outputs all deleted sequences containing the positions in the genome of the mutant ( chromosome and position ) and the ancestor ( chromosome_origin and position_origin ). deletions.annotated.tsv - Stores additionally which products were deleted. plasmids.tsv - Outputs entirely deleted plasmids. plasmids.annotated.tsv - Stores additionally which products were located on the deleted plasmids plots - Optional output. alignments - Visualizes alignments used to detect the deleted sequences. annotations - Visualizes the annotations of the deleted sequences. Plots Below you can see an example of a plotted alignment for a detected deleted sequence: The base track is the genome of the ancestor. The aligned sequences are derived from the mutant. The gap in the alignment means that the sequence is only present in the ancestor. Because of the continuos counters of the enumerated chunk IDs we can tell that the quality of the alignment is high. This increases the confidence in the detected deletion.","title":"Detect deletions"},{"location":"detect_deletions/#detect-deletions","text":"","title":"Detect deletions"},{"location":"detect_deletions/#alignment-and-detection","text":"To detect deletions StrucFollower chunks the genome of the mutant into smaller chunks. Those chunks are aligned to the genome of the ancestor and the alignment is scanned for areas with no coverage. In areas with no coverage the given sequence is present in the ancestor but absent in the mutant. The sequence flanking the alignment gap in the ancestor is extracted and aligned back to the genome of the mutant. Based on this alignment the positions in the genome of the mutant are identified.","title":"Alignment and detection"},{"location":"detect_deletions/#usage","text":"usage: detect_deletions [-h] [--plot] mutant ancestral out_dir Detect deletions in evolved bacterial strains. positional arguments: mutant fasta file of the mutated strain. ancestral genbank file of the ancestor out_dir output directory optional arguments: -h, --help show this help message and exit --plot plot alignments and annotations Example: detect_deletions --plot ancestor.gbk mutant.fasta ./","title":"Usage"},{"location":"detect_deletions/#outputs","text":"no_coverage.tsv - Outputs all positions with no coverage in the genome of the ancestor. deletions.tsv - Outputs all deleted sequences containing the positions in the genome of the mutant ( chromosome and position ) and the ancestor ( chromosome_origin and position_origin ). deletions.annotated.tsv - Stores additionally which products were deleted. plasmids.tsv - Outputs entirely deleted plasmids. plasmids.annotated.tsv - Stores additionally which products were located on the deleted plasmids plots - Optional output. alignments - Visualizes alignments used to detect the deleted sequences. annotations - Visualizes the annotations of the deleted sequences.","title":"Outputs"},{"location":"detect_deletions/#plots","text":"Below you can see an example of a plotted alignment for a detected deleted sequence: The base track is the genome of the ancestor. The aligned sequences are derived from the mutant. The gap in the alignment means that the sequence is only present in the ancestor. Because of the continuos counters of the enumerated chunk IDs we can tell that the quality of the alignment is high. This increases the confidence in the detected deletion.","title":"Plots"},{"location":"detect_hgts/","text":"Detect horizontal gene transfers Alignment and detection To detect horizontal gene transfers (HGTs) StrucFollower chunks the genome of the mutant into smaller chunks. Those chunks are aligned to the references of the strains of the co-culture. Every alignment is scanned. If a sequence is mapped it's either conserved or originates from the strain of the alignment. Because we store the contig name and the step ID in the sequence name we can trace back the position of the sequence in the genome of the mutant. To check if the sequence was inserted in the mutant the sequence is aligned to the ancestor of the mutant. If the sequence aligns it was already present at the start of the experiment. The sequence suspected to be a product of a HGT is annotated. If the sequence was not inserted but is conserved among the strains this is often visible in the annotation. Such sequences are often annotated as conserved ribosomal sequences. On the other hand inserted sequences as a product of HGTs are often annotated as transposons. Usage usage: detect_hgts [-h] [--plot] mutant ancestor references out_dir Detect HGTs in bacteria evolved in co-cultures. positional arguments: mutant genbank file of the mutant ancestor Fasta file of the ancestor. Prefix of fasta file will be interpreted as strain name. references Folder containing all genomes in fasta format of co-cultured bacteria. Prefix of fasta file will be interpreted as strain name. out_dir output directory optional arguments: -h, --help show this help message and exit --plot plot alignments and annotations Outputs hgts.tsv - Outputs all positions with sequences mapping to the provided references. The column origin stores to which reference the sequence aligns. hgts.annotated.tsv - Additionally stores the annotation for sequences mapping to the references. plots - Optional alignments - Visualizes alignments used to detect hgts. annotations - Visualizes the annotations of the detected sequences.","title":"Detect HGTs"},{"location":"detect_hgts/#detect-horizontal-gene-transfers","text":"","title":"Detect horizontal gene transfers"},{"location":"detect_hgts/#alignment-and-detection","text":"To detect horizontal gene transfers (HGTs) StrucFollower chunks the genome of the mutant into smaller chunks. Those chunks are aligned to the references of the strains of the co-culture. Every alignment is scanned. If a sequence is mapped it's either conserved or originates from the strain of the alignment. Because we store the contig name and the step ID in the sequence name we can trace back the position of the sequence in the genome of the mutant. To check if the sequence was inserted in the mutant the sequence is aligned to the ancestor of the mutant. If the sequence aligns it was already present at the start of the experiment. The sequence suspected to be a product of a HGT is annotated. If the sequence was not inserted but is conserved among the strains this is often visible in the annotation. Such sequences are often annotated as conserved ribosomal sequences. On the other hand inserted sequences as a product of HGTs are often annotated as transposons.","title":"Alignment and detection"},{"location":"detect_hgts/#usage","text":"usage: detect_hgts [-h] [--plot] mutant ancestor references out_dir Detect HGTs in bacteria evolved in co-cultures. positional arguments: mutant genbank file of the mutant ancestor Fasta file of the ancestor. Prefix of fasta file will be interpreted as strain name. references Folder containing all genomes in fasta format of co-cultured bacteria. Prefix of fasta file will be interpreted as strain name. out_dir output directory optional arguments: -h, --help show this help message and exit --plot plot alignments and annotations","title":"Usage"},{"location":"detect_hgts/#outputs","text":"hgts.tsv - Outputs all positions with sequences mapping to the provided references. The column origin stores to which reference the sequence aligns. hgts.annotated.tsv - Additionally stores the annotation for sequences mapping to the references. plots - Optional alignments - Visualizes alignments used to detect hgts. annotations - Visualizes the annotations of the detected sequences.","title":"Outputs"},{"location":"detect_insertions/","text":"Detect insertions Alignment and detection To detect insertions StrucFollower chunks the genome of the ancestor into smaller chunks. Those chunks are aligned to the genome of the mutant and the alignment is scanned for areas with no coverage. In areas with no coverage the given sequence is present in the genome of the mutant but absent the genome of the ancestor. Usage usage: detect_insertions [-h] [--plot] ancestral mutant out_dir Detect insertions in evolved bacterial strains. positional arguments: ancestral fasta file of the ancestor mutant genbank file of the mutant out_dir output directory optional arguments: -h, --help show this help message and exit --plot plot alignments and annotations Example: detect_insertions --plot ancestor.fasta mutant.gbk ./ Outputs insertions.tsv - Outputs all positions with inserted sequences insertions.annotated - Additionally outputs which products were inserted plots - Optional alignments - Visualizes alignments used to detect the inserted sequences. annotations - Visualizes the annotations of the inserted sequences. Plots Below you can see an example of a plotted alignment for a detected inserted sequence: The base track is the genome of the mutant. The aligned sequences are derived from the ancestor. The gap in the alignment means that the sequence is only present in the mutant. Because of the continuos counters of the enumerated chunk IDs we can tell that the quality of the alignment is high. This increases the confidence in the detected insertion.","title":"Detect insertions"},{"location":"detect_insertions/#detect-insertions","text":"","title":"Detect insertions"},{"location":"detect_insertions/#alignment-and-detection","text":"To detect insertions StrucFollower chunks the genome of the ancestor into smaller chunks. Those chunks are aligned to the genome of the mutant and the alignment is scanned for areas with no coverage. In areas with no coverage the given sequence is present in the genome of the mutant but absent the genome of the ancestor.","title":"Alignment and detection"},{"location":"detect_insertions/#usage","text":"usage: detect_insertions [-h] [--plot] ancestral mutant out_dir Detect insertions in evolved bacterial strains. positional arguments: ancestral fasta file of the ancestor mutant genbank file of the mutant out_dir output directory optional arguments: -h, --help show this help message and exit --plot plot alignments and annotations Example: detect_insertions --plot ancestor.fasta mutant.gbk ./","title":"Usage"},{"location":"detect_insertions/#outputs","text":"insertions.tsv - Outputs all positions with inserted sequences insertions.annotated - Additionally outputs which products were inserted plots - Optional alignments - Visualizes alignments used to detect the inserted sequences. annotations - Visualizes the annotations of the inserted sequences.","title":"Outputs"},{"location":"detect_insertions/#plots","text":"Below you can see an example of a plotted alignment for a detected inserted sequence: The base track is the genome of the mutant. The aligned sequences are derived from the ancestor. The gap in the alignment means that the sequence is only present in the mutant. Because of the continuos counters of the enumerated chunk IDs we can tell that the quality of the alignment is high. This increases the confidence in the detected insertion.","title":"Plots"}]}